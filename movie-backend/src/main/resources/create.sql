CREATE SCHEMA IF NOT EXISTS movie;

CREATE TABLE IF NOT EXISTS movie.REGISTER
(
  ID          BIGINT PRIMARY KEY NOT NULL,
  CODE        VARCHAR(10),
  NAME        VARCHAR(50),
  DESCRIPTION VARCHAR(200),
  INS_USERS   BIGINT,
  MODIF_USERS BIGINT,
  DELETED     SMALLINT DEFAULT 0 NOT NULL
);
CREATE SEQUENCE IF NOT EXISTS movie.sq_register START WITH 1 INCREMENT BY 1  MINVALUE 1 CACHE 20;

CREATE TABLE IF NOT EXISTS movie.REGISTER_ITEM
(
  ID          BIGINT PRIMARY KEY NOT NULL,
  ID_REGISTER BIGINT,
  CODE        VARCHAR(10),
  NAME        VARCHAR(50),
  DESCRIPTION VARCHAR(200),
  INS_USERS   BIGINT,
  MODIF_USERS BIGINT,
  DELETED     SMALLINT DEFAULT 0 NOT NULL
);
CREATE SEQUENCE IF NOT EXISTS movie.sq_register_item START WITH 1 INCREMENT BY 1  MINVALUE 1 CACHE 20;
ALTER TABLE MOVIE.REGISTER_ITEM ADD FOREIGN KEY (ID_REGISTER) REFERENCES REGISTER (ID);


-- param variable
CREATE TABLE IF NOT EXISTS MOVIE.PARAMVARIABLE
(
  ID          BIGINT             NOT NULL,
  NAME_GROUP  VARCHAR(20)        NOT NULL,
  NAME_VAR    VARCHAR(20)        NOT NULL,
  C_VALUE     VARCHAR(200),
  D_VALUE     TIMESTAMP,
  N_VALUE     DECIMAL(18, 6),
  VALID_FROM  TIMESTAMP          NOT NULL,
  VALID_TO    TIMESTAMP,
  INS_USERS   BIGINT,
  MODIF_USERS BIGINT,
  DELETED     SMALLINT DEFAULT 0 NOT NULL,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE IF NOT EXISTS movie.sq_paramvariable START WITH 1 INCREMENT BY 1  MINVALUE 1 CACHE 20;


--person
CREATE TABLE IF NOT EXISTS MOVIE.PERSON
(
  ID          BIGINT             NOT NULL,
  NAME        VARCHAR(30),
  SURNAME     VARCHAR(30),
  MOBIL       VARCHAR(20),
  PHONE       VARCHAR(20),
  EMAIL       VARCHAR(150),
  STREET      VARCHAR(50),
  STREET_NUM  VARCHAR(10),
  CITY        VARCHAR(30),
  COUNTRY     VARCHAR(30),
  INS_USERS   BIGINT,
  MODIF_USERS BIGINT,
  DELETED     SMALLINT DEFAULT 0 NOT NULL,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE IF NOT EXISTS movie.sq_person START WITH 1 INCREMENT BY 1  MINVALUE 1 CACHE 20;

CREATE TABLE IF NOT EXISTS movie.RIGHTS
(
  ID          BIGINT             NOT NULL,
  CODE        VARCHAR(10),
  NAME        VARCHAR(50),
  DESCRIPTION VARCHAR(200),
  INS_USERS   BIGINT,
  MODIF_USERS BIGINT,
  DELETED     SMALLINT DEFAULT 0 NOT NULL,
  PRIMARY KEY (ID)
);


CREATE SEQUENCE IF NOT EXISTS movie.sq_rights START WITH 1 INCREMENT BY 1  MINVALUE 1 CACHE 20;


CREATE TABLE IF NOT EXISTS movie.USERS
(
  ID          BIGINT             NOT NULL,
  ID_PERSON   BIGINT,
  USERNAME    VARCHAR(20)        NOT NULL,
  PASS        VARCHAR(50)        NOT NULL,
  INS_USERS   BIGINT,
  MODIF_USERS BIGINT,
  DELETED     SMALLINT DEFAULT 0 NOT NULL,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE IF NOT EXISTS movie.sq_users START WITH 1 INCREMENT BY 1  MINVALUE 1 CACHE 20;


CREATE TABLE IF NOT EXISTS movie.USERS_GROUP
(
  ID          BIGINT             NOT NULL,
  ID_USERS    BIGINT,
  ID_GROUP    BIGINT,
  INS_USERS   BIGINT,
  MODIF_USERS BIGINT,
  DELETED     SMALLINT DEFAULT 0 NOT NULL,
  PRIMARY KEY (ID)
);
CREATE SEQUENCE IF NOT EXISTS movie.sq_USERS_GROUP START WITH 1 INCREMENT BY 1  MINVALUE 1 CACHE 20;


CREATE TABLE IF NOT EXISTS MOVIE.GROUPS
(
  ID          BIGINT             NOT NULL,
  CODE        VARCHAR(10),
  NAME        VARCHAR(50),
  DESCRIPTION VARCHAR(200),
  INS_USERS   BIGINT,
  MODIF_USERS BIGINT,
  DELETED     SMALLINT DEFAULT 0 NOT NULL,
  PRIMARY KEY (ID)
);
CREATE SEQUENCE IF NOT EXISTS movie.sq_GROUPs START WITH 1 INCREMENT BY 1  MINVALUE 1 CACHE 20;

CREATE TABLE IF NOT EXISTS MOVIE.GROUP_RIGHTS
(
  ID          BIGINT             NOT NULL,
  ID_RIGHT    BIGINT,
  ID_GROUP    BIGINT,
  INS_USERS   BIGINT,
  MODIF_USERS BIGINT,
  DELETED     SMALLINT DEFAULT 0 NOT NULL,
  PRIMARY KEY (ID)
);
CREATE SEQUENCE IF NOT EXISTS movie.sq_GROUP_RIGHTS START WITH 1 INCREMENT BY 1  MINVALUE 1 CACHE 20;

ALTER TABLE MOVIE.GROUP_RIGHTS ADD FOREIGN KEY (ID_GROUP) REFERENCES MOVIE.GROUPS (ID);
ALTER TABLE MOVIE.GROUP_RIGHTS ADD FOREIGN KEY (ID_RIGHT) REFERENCES MOVIE.RIGHTS (ID);
ALTER TABLE MOVIE.USERS_GROUP ADD FOREIGN KEY (ID_USERS) REFERENCES MOVIE.USERS (ID) ;
ALTER TABLE MOVIE.USERS_GROUP ADD FOREIGN KEY (ID_GROUP) REFERENCES MOVIE.GROUPS (ID);

